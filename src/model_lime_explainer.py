import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from lime.lime_tabular import LimeTabularExplainer

# -----------------------------
# 1. Carregamento do dataset
# -----------------------------
colunas = [
    'status_conta', 'dura√ß√£o', 'hist√≥rico_cr√©dito', 'prop√≥sito', 'valor_cr√©dito',
    'conta_poupan√ßa', 'tempo_emprego', 'taxa_parcelamento', 'status_pessoal_sexo',
    'fiadores', 'dura√ß√£o_resid√™ncia', 'propriedade', 'idade', 'outros_planos',
    'habita√ß√£o', 'n_cred_pendentes', 'emprego_desde', 'trabalhador_estrangeiro',
    'telefone', 'profiss√£o', 'classe'
]

# Caminho robusto para acesso ao dataset
base_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'data'))
data_path = os.path.join(base_path, 'german.data')

# Carregamento
df = pd.read_csv(data_path, sep=' ', header=None, names=colunas)

# -----------------------------
# 2. Pr√©-processamento
# -----------------------------
df['classe'] = df['classe'].map({1: 1, 2: 0})  # 1: bom pagador, 0: mal pagador
X = df.drop(columns=['classe'])
y = df['classe']

# One-hot encoding autom√°tico para vari√°veis categ√≥ricas
X_encoded = pd.get_dummies(X)

# -----------------------------
# 3. Treinamento do modelo
# -----------------------------
X_train, X_test, y_train, y_test = train_test_split(X_encoded, y, test_size=0.2, random_state=42, stratify=y)
modelo = RandomForestClassifier(n_estimators=100, random_state=42)
modelo.fit(X_train, y_train)

# Avalia√ß√£o
print("\nRelat√≥rio de Classifica√ß√£o:\n")
print(classification_report(y_test, modelo.predict(X_test)))

# -----------------------------
# 4. Explicador LIME
# -----------------------------
explainer = LimeTabularExplainer(
    training_data=np.array(X_train),
    feature_names=X_encoded.columns.tolist(),
    class_names=["Mal Pagador", "Bom Pagador"],
    mode="classification",
    discretize_continuous=True
)

# -----------------------------
# 5. Fun√ß√£o de explica√ß√£o com LIME
# -----------------------------
def gerar_explicacao(instancia, nome_arquivo, titulo):
    pred = modelo.predict([instancia])[0]
    probas = modelo.predict_proba([instancia])[0]
    label = int(pred)

    exp = explainer.explain_instance(instancia, modelo.predict_proba, num_features=10)

    fig = exp.as_pyplot_figure(label=label)
    plt.title(titulo, fontsize=12, fontweight='bold')
    plt.tight_layout()
    img_path = os.path.join("..", "data", f"{nome_arquivo}.png")
    plt.savefig(img_path, bbox_inches='tight')
    plt.close(fig)

    frases = []
    for atributo, peso in exp.as_list(label=label):
        cor = "üîµ" if peso > 0 else "üü†"
        direcao = "Bom Pagador" if peso > 0 else "Mal Pagador"
        frases.append(f"- {cor} A caracter√≠stica {atributo} contribuiu para classificar como {direcao}.")

    return exp, frases, img_path, label

# -----------------------------
# 6. Sele√ß√£o autom√°tica de inst√¢ncias
# -----------------------------
inst_bom = X_test[y_test == 1].iloc[0]
inst_mal = X_test[y_test == 0].iloc[0]

# -----------------------------
# 7. Gerar explica√ß√µes
# -----------------------------
_, frases_bom, img_bom, _ = gerar_explicacao(inst_bom, "grafico_bom_pagador", "Por que o modelo classificou como 'Bom Pagador'?")
_, frases_mal, img_mal, _ = gerar_explicacao(inst_mal, "grafico_mal_pagador", "Por que o modelo classificou como 'Mal Pagador'?")

print("\n‚úÖ Explica√ß√µes para Bom Pagador:")
print("\n".join(frases_bom))

print("\n‚úÖ Explica√ß√µes para Mal Pagador:")
print("\n".join(frases_mal))

# -----------------------------
# 8. Explica√ß√£o interpretativa final (para relat√≥rio)
# -----------------------------
print("\nüìò Defini√ß√£o interpretativa:")

print("\n‚úÖ Bom Pagador")
print("Um cliente √© classificado como Bom Pagador quando possui um perfil que sugere baixo risco de inadimpl√™ncia. Entre os principais fatores que influenciam positivamente est√£o:\n")
print("- Ter uma conta banc√°ria ativa com bom hist√≥rico de movimenta√ß√£o.")
print("- Apresentar um bom hist√≥rico de cr√©dito (pagamentos anteriores em dia).")
print("- Ter uma idade mais avan√ßada, geralmente acima dos 30 anos, o que indica maior estabilidade.")
print("- Solicitar valores de cr√©dito mais baixos ou proporcionais √† renda.")
print("- Estar empregado h√° mais tempo, demonstrando estabilidade profissional.")
print("- Ter objetivos de cr√©dito claros e seguros, como aquisi√ß√£o de bens essenciais.")
print("- Possuir bens no nome (como carro ou im√≥vel).")
print("- Ter telefone ativo, o que sugere maior rastreabilidade e transpar√™ncia.")

print("\n‚ùå Mal Pagador")
print("Um cliente √© classificado como Mal Pagador quando o modelo identifica um conjunto de caracter√≠sticas associadas a maior risco de inadimpl√™ncia. Entre os fatores mais comuns est√£o:\n")
print("- Aus√™ncia de conta banc√°ria ativa ou movimenta√ß√µes suspeitas.")
print("- Hist√≥rico de cr√©dito ruim ou inexistente.")
print("- Idade muito baixa, indicando pouca experi√™ncia financeira.")
print("- Solicita√ß√£o de valores elevados de cr√©dito, desproporcionais √† estabilidade demonstrada.")
print("- Pouco tempo no emprego atual.")
print("- Falta de reserva financeira (como conta poupan√ßa ou investimentos).")
print("- Motiva√ß√µes de cr√©dito mais arriscadas, como empr√©stimos para consumo n√£o essencial.")
print("- Aus√™ncia de patrim√¥nio registrado ou garantias.")
