import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
import lime
import lime.lime_tabular

# Caminho robusto para o arquivo
base_dir = os.path.dirname(__file__)
data_path = os.path.join(base_dir, '..', 'data', 'german.data')

# Nomes das colunas conforme documenta√ß√£o
colunas = [
    "status_conta", "dura√ß√£o", "hist√≥rico_cr√©dito", "prop√≥sito", "valor_cr√©dito",
    "conta_poupan√ßa", "resid√™ncia_atual", "emprego_desde", "taxa_parcelamento",
    "sexo_estado_civil", "garantia", "resid√™ncia", "idade", "outros_planos",
    "habita√ß√£o", "n_creditos", "trabalhador_estrangeiro", "profiss√£o",
    "telefone", "status", "classe"
]

# Leitura do dataset
df = pd.read_csv(data_path, sep=' ', header=None, names=colunas)

# Separar X e y
X = df.drop("classe", axis=1)
y = df["classe"].copy()

# Ajustar r√≥tulos: 1 = bom pagador, 2 = mal pagador
y = y.map({1: 1, 2: 0})  # 1=bom, 0=mal

# Codificar vari√°veis categ√≥ricas
X_encoded = pd.get_dummies(X)

# Separar treino e teste
X_train, X_test, y_train, y_test = train_test_split(X_encoded, y, test_size=0.2, random_state=42)

# Treinar modelo
modelo = RandomForestClassifier(n_estimators=100, random_state=42)
modelo.fit(X_train, y_train)

# Avalia√ß√£o
y_pred = modelo.predict(X_test)
print("Relat√≥rio de Classifica√ß√£o:\n")
print(classification_report(y_test, y_pred))

# Preparar diret√≥rio de sa√≠da
output_dir = os.path.join(base_dir, '..', 'data')
os.makedirs(output_dir, exist_ok=True)

# LIME
explainer = lime.lime_tabular.LimeTabularExplainer(
    training_data=np.array(X_train),
    feature_names=X_train.columns.tolist(),
    class_names=["Mal Pagador", "Bom Pagador"],
    mode="classification"
)

# Fun√ß√£o de explica√ß√£o com salvamento e frases
def gerar_explicacao(instancia, nome_arquivo, titulo):
    exp = explainer.explain_instance(instancia, modelo.predict_proba, num_features=10)
    fig = exp.as_pyplot_figure(label=int(modelo.predict([instancia])[0]))
    plt.title(titulo)
    img_path = os.path.join(output_dir, f"{nome_arquivo}.png")
    plt.savefig(img_path, bbox_inches='tight')
    plt.close()

    explicacoes = exp.as_list(label=int(modelo.predict([instancia])[0]))
    frases = []
    for feat, val in explicacoes:
        direcao = "üü¢" if val > 0 else "üî¥"
        classe = "Bom Pagador" if val > 0 else "Mal Pagador"
        frases.append(f"- {direcao} A caracter√≠stica {feat} contribuiu para classificar como {classe}.")
    return frases

# Selecionar inst√¢ncias reais
inst_bom = X_test[y_test == 1].iloc[0]
inst_mal = X_test[y_test == 0].iloc[0]

# Gerar explica√ß√µes
frases_bom = gerar_explicacao(inst_bom, "grafico_bom_pagador", "Por que o modelo classificou como 'Bom Pagador'?")
frases_mal = gerar_explicacao(inst_mal, "grafico_mal_pagador", "Por que o modelo classificou como 'Mal Pagador'?")

# Apresentar explica√ß√µes
print("\n‚úÖ Explica√ß√µes para Bom Pagador:")
for frase in frases_bom:
    print(frase)

print("\n‚ùå Explica√ß√µes para Mal Pagador:")
for frase in frases_mal:
    print(frase)

# Explica√ß√µes gerais para o relat√≥rio
print("\nüìò O que define um Bom ou Mal Pagador:\n")

print("‚úÖ Bom Pagador")
print("Um cliente √© classificado como Bom Pagador quando possui um perfil que sugere baixo risco de inadimpl√™ncia. Entre os principais fatores est√£o:")
print("- Ter uma conta banc√°ria ativa com bom hist√≥rico de movimenta√ß√£o.")
print("- Apresentar um bom hist√≥rico de cr√©dito (pagamentos em dia).")
print("- Idade mais avan√ßada (acima dos 30 anos).")
print("- Solicitar valores proporcionais √† renda.")
print("- Estabilidade no emprego atual.")
print("- Objetivos de cr√©dito claros (ex: aquisi√ß√£o de bens).")
print("- Possuir bens no nome (carro, im√≥vel).")
print("- Ter telefone ativo (transpar√™ncia e rastreabilidade).")

print("\n‚ùå Mal Pagador")
print("Um cliente √© classificado como Mal Pagador quando o modelo identifica fatores associados a maior risco de inadimpl√™ncia. Entre os principais est√£o:")
print("- Aus√™ncia de conta banc√°ria ativa ou movimenta√ß√µes suspeitas.")
print("- Hist√≥rico de cr√©dito ruim ou inexistente.")
print("- Idade muito baixa (pouca experi√™ncia).")
print("- Solicita√ß√£o de valores elevados e desproporcionais.")
print("- Pouco tempo no emprego atual.")
print("- Falta de reserva financeira ou garantias.")
print("- Motiva√ß√µes de cr√©dito mais arriscadas.")
